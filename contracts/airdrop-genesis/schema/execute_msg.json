{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "claim_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "ido_addresses": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "lp_staking_addresses": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "stt_staking_addresses": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "end_genesis_airdrop"
      ],
      "properties": {
        "end_genesis_airdrop": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_airdrop_accounts"
      ],
      "properties": {
        "register_airdrop_accounts": {
          "type": "object",
          "required": [
            "airdrop_accounts"
          ],
          "properties": {
            "airdrop_accounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirdropAccount"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "ust_withdraw"
      ],
      "properties": {
        "ust_withdraw": {
          "type": "object",
          "required": [
            "to"
          ],
          "properties": {
            "to": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "emergency_withdraw"
      ],
      "properties": {
        "emergency_withdraw": {
          "type": "object",
          "required": [
            "amount",
            "to"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "to": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "accept_ownership"
      ],
      "properties": {
        "accept_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AirdropAccount": {
      "type": "object",
      "required": [
        "address",
        "already_claimed",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "already_claimed": {
          "$ref": "#/definitions/Uint128"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
